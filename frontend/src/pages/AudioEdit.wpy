<style>
.time-count {
  display: flex;
  justify-content: center;
  align-items: flex-end;
  margin: 80rpx auto 20rpx;
  height: 120rpx;
}
.time-count > view {
  color: #666666;
}
.current-time {
  font-size: 100rpx;
  line-height: 100rpx;
}
.total-time {
  font-size: 40rpx;
}
.btn-area {
  width:100%;
  height:700rpx;
  display:flex;
  justify-content:center;
  align-items:flex-end;
}
.btn-area > image {
  position: absolute;
}
.main-btn {
  height: 240rpx;
  width: 240rpx;
  border-radius: 240rpx;
  box-shadow: 0 0 16rpx 5rpx #bbb;
  z-index: 120;
}
.side-btn {
  height: 120rpx;
  width: 120rpx;
  border-radius: 120rpx;
  box-shadow: 0 0 10rpx 5rpx #bbb;
  opacity: 0;
}
</style>
<template>
  <view class="main">
    <view class="top-bar">
      <image src="{{starImg}}" wx:if="{{!isSubmitted}}" @tap="star"></image>
      <image src="../assets/ok.png" wx:if="{{isSubmitted}}" @tap="submit"></image>
      <image src="../assets/delete.png" @tap="del"></image>
    </view>
    <view class="below-panel">
      <view class="time-count">
        <view class="current-time">{{currentTime}}</view>
        <view class="total-time" wx:if="{{showTotalTime}}">{{totalTime}}</view>
      </view>
      <titleEdit :name="name" :name.sync="name" wx:if="{{isSubmitted}}"></titleEdit>
      <view class="btn-area">
        <image class="main-btn" src="{{mainBtnImg}}" animation="{{mainBtnAnimation}}" @tap="mainTap"></image>
        <image class="side-btn" src="../assets/audio/stop-record.jpg" animation="{{sideBtnAnimation}}" @tap="stopRecord"></image>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy';
import baseEdit from '../mixins/editBase';
import TitleEdit from '../components/TitleEdit';
import {tips} from '../utils/tips';

const WAIT_RECORD = 0, RECORDING = 1, RECORD_PAUSE = 2, WAIT_PLAY = 3, PLAYING = 4, PLAY_PAUSE = 5;
export default class AudioEdit extends wepy.page {
  data = {
    pageTitle: '语音日记',
    mainBtnAnimation: null,
    sideBtnAnimation: null,
    state: {
      // 0 等待开始录制
      states: ['wait-record',
        // 状态依次为：1 录制中，2 暂停录制，3 录指完成/等待播放，4 播放中，5 暂停播放
        'recording', 'record-pause', 'wait-play', 'playing', 'play-pause'],
      current: 0
    },
    recordTime: 0
  };

  components = {
    titleEdit: TitleEdit
  };

  computed = {
    currentTime: function () {
      let stateNo = this.state.current;
      if (stateNo === RECORDING || stateNo === RECORD_PAUSE) {
        return this.secondFormat(this.recorder.currentTime);
      } else if (stateNo === PLAYING || stateNo === PLAY_PAUSE) {
        return this.secondFormat(this.player.currentTime);
      } else {
        return '00:00';
      }
    },
    totalTime: function () {
      return '/' + this.secondFormat(Math.ceil(this.recordTime));
    },
    mainBtnImg: function () {
      return `../assets/audio/${this.state.states[this.state.current]}.jpg`;
    },
    showTotalTime: function () {
      return !!this.id || this.recordTime !== 0;
    }
  };

  mixins = [baseEdit];

  methods = {
    mainTap: function () {
      switch (this.state.current) {
      case WAIT_RECORD:
        this.showSideBtn();
        this.state.current = RECORDING;
        this.recorder.start();
        break;
      case RECORDING:
        this.state.current = RECORD_PAUSE;
        this.recorder.pause();
        break;
      case RECORD_PAUSE:
        this.state.current = RECORDING;
        this.recorder.resume();
        break;
      case WAIT_PLAY:
        this.state.current = PLAYING;
        this.player.play();
        break;
      case PLAYING:
        this.state.current = PLAY_PAUSE;
        this.player.pause();
        break;
      case PLAY_PAUSE:
        this.state.current = PLAYING;
        this.player.resume();
      }
    },
    stopRecord: function () {
      this.recorder.stop();
      this.state.current = WAIT_PLAY;
      this.hideSideBtn();
    }
  };

  secondFormat = function (seconds) {
    let minutes = Math.floor(seconds / 60);
    seconds = seconds - minutes * 60;
    return this.str_pad_left(minutes, '0', 2) + ':' + this.str_pad_left(seconds, '0', 2);
  };

  str_pad_left = function (string, pad, length) {
    return (new Array(length + 1).join(pad) + string).slice(-length);
  };

  hideSideBtn = function () {
    this.mainBtnAnimation = wx.createAnimation({timingFunction: 'ease'});
    this.sideBtnAnimation = wx.createAnimation({timingFunction: 'ease'});
    this.mainBtnAnimation.translateX(0).step({duration: 200});
    this.sideBtnAnimation.opacity(0).translateX(0).step({duration: 200});
  };

  showSideBtn = function () {
    this.mainBtnAnimation = wx.createAnimation({timingFunction: 'ease'});
    this.sideBtnAnimation = wx.createAnimation({timingFunction: 'ease'});
    this.mainBtnAnimation.translateX(-30).step({duration: 200});
    this.sideBtnAnimation.opacity(1).translateX(70).step({duration: 200});
  };

  recorder = {
    global: this,
    recorderManager: wx.getRecorderManager(),
    currentTime: 0,
    microsecond: 0,
    timePlusHandler: null,
    start: function () {
      tips.showTextToast('开始录音，最长时间10分钟');
      this.recorderManager.start({
        duration: 600000
      });
      this.plusSecond();
    },
    pause: function () {
      let handler = this.timePlusHandler;
      clearInterval(handler);
      this.recorderManager.pause();
    },
    resume: function () {
      this.plusSecond();
      this.recorderManager.resume();
    },
    stop: function () {
      this.recorderManager.stop();
      let that = this.global;
      this.recorderManager.onStop(e => {
        that.player.init(e.tempFilePath);
      });
    },
    plusSecond: function () {
      let that = this;
      this.timePlusHandler = setInterval(e => {
        that.microsecond++;
        if (that.microsecond % 10 === 0) {
          that.currentTime = that.microsecond / 10;
          that.global.$apply();
        }
      }, 100);
    }
  };

  player = {
    global: this,
    innerPlayer: null,
    currentTime: 0,
    microsecond: 0,
    timePlusHandler: null,
    init: function (source) {
      this.innerPlayer = wx.createInnerAudioContext();
      this.innerPlayer.src = source;
      this.getDuration();
    },
    play: function () {
      this.plusSecond();
      this.innerPlayer.play();
    },
    pause: function () {
      let handler = this.timePlusHandler;
      clearInterval(handler);
      this.innerPlayer.pause();
    },
    stop: function () {
      let handler = this.timePlusHandler;
      clearInterval(handler);
      this.currentTime = 0;
      this.innerPlayer.stop();
    },
    resume: function () {
      this.plusSecond();
      this.innerPlayer.play();
    },
    plusSecond: function () {
      let that = this;
      this.timePlusHandler = setInterval(e => {
        that.microsecond++;
        if (that.microsecond % 10 === 0) {
          that.currentTime = that.microsecond / 10;
          that.global.$apply();
        }
      }, 100);
    },
    getDuration: function () {
      let calcIndex = 0;
      let p = this.innerPlayer;
      let gl = this.global;
      let calcTimer = setInterval(function () {
        calcIndex++;
        // 反复尝试仍获取失败，则取消尝试
        if (calcIndex > 50) {
          clearInterval(calcTimer);
          tips.showError('小程序出错');
        }
        if (p.duration > 0) {
          gl.recordTime = p.duration;
          gl.$apply();
          clearInterval(calcTimer);
        }
      }, 100);
    }
  };

  onLoad () {
  }
}
</script>
